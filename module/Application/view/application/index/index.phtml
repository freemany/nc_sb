<button id="delete-btn" type="button" class="btn btn-sm pull-right">
    <span class="glyphicon glyphicon-remove"></span> Delete Csv & Json files</button>


<div id="form"></div>
<button id="run-btn" type="button" class="btn btn-primary btn-xlarge center-block">Tell me what is cooking tonight</button>



<div class="modal fade" id="answerModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title">What is cooking tonight?</h3>
            </div>
            <div class="modal-body"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div><!--end of modal-->

<div class="modal fade" id="deleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h3 class="modal-title">Message</h3>
            </div>
            <div class="modal-body">Those files have been deleted.</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

            </div>
        </div>
    </div>
</div><!--end of modal-->
<script>

    var baseUrl = '<?php $baseUrl;?>';

    var AjaxForm = function() {

        this.url = arguments[0];
        this.wrapper = (arguments[1]!==undefined) ? arguments[1] : '#form';
        this.form = (arguments[2]!==undefined) ? arguments[2] : '#frmUpload';

        this.options = {
            target: this.wrapper,
            success: $.proxy(this.action, this)
        };
        this.init();
    };

    AjaxForm.prototype = {

        init: function() {
            this.loadForm();
            this.initRunBtn();
            this.initDeleteBtn();
            this.initCollapsible();
        },
        loadForm: function() {
            $(this.wrapper).load(this.url + '?'+Math.random(), $.proxy(this.action, this));
        },
        action: function () {
            $(this.form).ajaxForm(this.options);
            if ($('.js-uploaded-file').length == 2) {
                $('#run-btn').removeClass('disabled');
            }  else {
                $('#run-btn').addClass('disabled');
            }
        },

        initRunBtn: function() {
            $('#run-btn').click(function(e) {
                e.preventDefault();

                if ($(this).hasClass('disabled')) {
                    return false;
                }

                $.getJSON(baseUrl +'api/index/cook-analyzer?'+Math.random(), function(data) {

                    $('#answerModal').find('.modal-body').text(data.result);
                    $('#answerModal').modal();
                });

            });
        },

        initDeleteBtn: function() {
            var that = this;
            $('#delete-btn').click(function(e) {
                e.preventDefault();

                $.get(baseUrl + 'api/index/delete-files', function() {
                    $('#deleteModal').modal();
                    that.loadForm();
                })
            });
        },

        initCollapsible: function() {
            $(document).delegate('.panel-heading', 'click', function() {
                var $content = $(this).next();
                $content.toggleClass('collapse');
                return false;
            });
        }
    };

var ajaxForm = new AjaxForm(baseUrl + 'api/index/form');
</script>